{
  "name": "Express.js API Server",
  "description": "RESTful API server with Express.js and modern middleware",
  "build_type": "api",
  "framework": "express",
  "language": "javascript",
  "files": {
    "package.json": {
      "name": "{{project_name}}",
      "version": "1.0.0",
      "description": "Express.js API server",
      "main": "server.js",
      "scripts": {
        "start": "node server.js",
        "dev": "nodemon server.js",
        "test": "jest",
        "lint": "eslint ."
      },
      "dependencies": {
        "express": "^4.18.2",
        "cors": "^2.8.5",
        "helmet": "^7.0.0",
        "morgan": "^1.10.0",
        "dotenv": "^16.3.1"
      },
      "devDependencies": {
        "nodemon": "^3.0.1",
        "jest": "^29.6.2",
        "eslint": "^8.45.0"
      }
    },
    "server.js": "const express = require('express');\nconst cors = require('cors');\nconst helmet = require('helmet');\nconst morgan = require('morgan');\nrequire('dotenv').config();\n\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\n// Middleware\napp.use(helmet());\napp.use(cors());\napp.use(morgan('combined'));\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\n\n// Routes\napp.get('/', (req, res) => {\n  res.json({ \n    message: 'Welcome to {{project_name}} API',\n    version: '1.0.0',\n    status: 'running'\n  });\n});\n\napp.get('/api/health', (req, res) => {\n  res.json({ \n    status: 'healthy',\n    timestamp: new Date().toISOString()\n  });\n});\n\n// Error handling middleware\napp.use((err, req, res, next) => {\n  console.error(err.stack);\n  res.status(500).json({ error: 'Something went wrong!' });\n});\n\n// 404 handler\napp.use('*', (req, res) => {\n  res.status(404).json({ error: 'Route not found' });\n});\n\napp.listen(PORT, () => {\n  console.log(`\ud83d\ude80 {{project_name}} API server running on port ${PORT}`);\n});\n\nmodule.exports = app;",
    ".env.example": "PORT=3000\nNODE_ENV=development\nAPI_KEY=your_api_key_here\nDATABASE_URL=your_database_url_here",
    "README.md": "# {{project_name}}\n\nExpress.js API server with modern middleware and best practices.\n\n## Getting Started\n\n```bash\n# Install dependencies\nnpm install\n\n# Copy environment variables\ncp .env.example .env\n\n# Start development server\nnpm run dev\n\n# Start production server\nnpm start\n```\n\n## API Endpoints\n\n- `GET /` - API information\n- `GET /api/health` - Health check\n\n## Features\n\n- \ud83d\ude80 Express.js framework\n- \ud83d\udee1\ufe0f Security with Helmet\n- \ud83c\udf10 CORS enabled\n- \ud83d\udcdd Request logging with Morgan\n- \ud83d\udd27 Environment variables\n- \ud83e\uddea Jest testing setup\n\n## Scripts\n\n- `npm start` - Start production server\n- `npm run dev` - Start development server with nodemon\n- `npm test` - Run tests\n- `npm run lint` - Run ESLint\n\n---\n\nBuilt with \u2764\ufe0f using FZX-Terminal Building Agent\n",
    ".gitignore": "node_modules/\n.env\n.DS_Store\nlogs\n*.log\nnpm-debug.log*\ndist/\ncoverage/"
  },
  "directories": [
    "routes",
    "middleware",
    "models",
    "tests"
  ],
  "commands": [
    {
      "name": "install",
      "command": "npm install"
    },
    {
      "name": "dev",
      "command": "npm run dev"
    },
    {
      "name": "start",
      "command": "npm start"
    }
  ]
}